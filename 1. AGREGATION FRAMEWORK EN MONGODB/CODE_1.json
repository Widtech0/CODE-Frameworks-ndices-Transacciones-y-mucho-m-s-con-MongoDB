
//////////////////////////////////////
    BLOQUE 1. "CONJUNTO DE DATOS"
//////////////////////////////////////

db.ventas.insertMany(
    [
        {
            "_id": 1,
            "producto": "Laptop HP",
            "cantidad": 10,
            "precio_unitario": 1200,
            "fecha_venta": ISODate("2023-01-15T08:00:00Z"),
            "categoria": "Electrónicos"
        },

        {
            "_id": 2,
            "producto": "Dell Laptop",
            "cantidad": 5,
            "precio_unitario": 1000,
            "fecha_venta": ISODate("2023-02-20T12:30:00Z"),
            "categoria": "Electrónicos"
        },

        {
            "_id": 3,
            "producto": "Lenovo Laptop",
            "cantidad": 8,
            "precio_unitario": 1100,
            "fecha_venta": ISODate("2023-03-10T15:45:00Z"),
            "categoria": "Electrónicos"
        },

        {
            "_id": 4,
            "producto": "Smartwatch",
            "cantidad": 15,
            "precio_unitario": 300,
            "fecha_venta": ISODate("2023-04-01T09:30:00Z"),
            "categoria": "Electrónicos"
        },

        {
            "_id": 5,
            "producto": "Camara DSLR",
            "cantidad": 3,
            "precio_unitario": 800,
            "fecha_venta": ISODate("2023-05-12T14:15:00Z"),
            "categoria": "Electrónicos"
        },

        {
            "_id": 6,
            "producto": "Tablet Samsung",
            "cantidad": 7,
            "precio_unitario": 500,
            "fecha_venta": ISODate("2023-06-03T11:45:00Z"),
            "categoria": "Electrónicos"
        },

        {
            "_id": 7,
            "producto": "Libro de Ciencia Ficcion",
            "cantidad": 20,
            "precio_unitario": 30,
            "fecha_venta": ISODate("2023-07-20T16:00:00Z"),
            "categoria": "Libros"
        },

        {
            "_id": 8,
            "producto": "Refrigeradora LG",
            "cantidad": 2,
            "precio_unitario": 1600,
            "fecha_venta": ISODate("2023-08-05T10:30:00Z"),
            "categoria": "Electrodomesticos"
        },

        {
            "_id": 9,
            "producto": "Altavoces Bluetooth",
            "cantidad": 12,
            "precio_unitario": 100,
            "fecha_venta": ISODate("2023-09-15T13:20:00Z"),
            "categoria": "Electrónicos"
        },

        {
            "_id": 10,
            "producto": "Mesa de Centro",
            "cantidad": 1,
            "precio_unitario": 200,
            "fecha_venta": ISODate("2023-10-08T09:00:00Z"),
            "categoria": "Muebles"
        }
    ]
)

//////////////////////////////////////
BLOQUE 2. "OPERADOR MATCH"
//////////////////////////////////////


****EJEMPLO 1*****
//Se muestra del conjunto de datos aquellos elementos pertenecientes a la categoría "Muebles"

db.ventas.aggregate([
    {
        $match:{
            categoria: "Muebles"
        }
    }
]);

****EJEMPLO 2*****
//Se muestran aquellos elementos del conjunto que contienen una cantidad de elementos mayores que 5
db.ventas.aggregate([
    {
        $match:{
            cantidad: {
                $gt: 5
            }
        }
    }
]);

****EJEMPLO 3*****
//Se muestran aquellos elementos del conjunto que contengan elementos de fecha de venta dados en el rango desde Febrero hasta Abril del 2023
db.ventas.aggregate([
    {
        $match:{
            fecha_venta: {
                $gte: ISODate("2023-02-01T00:00:00Z"),
                $lt: ISODate("2023-04-01T00:00:00Z"),
            }
        }
    }
]);

****EJEMPLO 4*****
//Se filtran los elementos del conjunto que contengan una cantidad mayor a 5 y que sean de la categoría de electrónicos
db.ventas.aggregate([
    {
        $match:{
            $and: [
                { cantidad: {$gte: 5} },
                { categoria: "Electrónicos" }
            ]
        }
    }
]);

****EJEMPLO 5*****
//Se filtra del conjunto de datos aquellos elementos que contengan en su nombre la palabra Laptop, indiferentemente de su escritura 
db.ventas.aggregate([
    {
        $match:{
            producto: { 
                $regex: /Laptop/i 
            }
        }
    }
]);

//////////////////////////////////////
BLOQUE 3. "OPERADOR GROUP"
//////////////////////////////////////

****EJEMPLO 1*****
//Se agrupa la sumatoria de las cantidades por categoría
db.ventas.aggregate([
    {
        $group: {
            _id: "$categoria",
            total_vendido: { $sum: "$cantidad" }
        }
    }
]);

****EJEMPLO 2*****
//Realiza el promedio de los precios unitarios por fecha de venta
db.ventas.aggregate([
    {
        $group: {
            _id: { $month: "$fecha_venta" },
            precio_promedio: { $avg: "$precio_unitario" }
        }
    }
]);

****EJEMPLO 3*****
//Se delimita por medio de un switch dos casos, donde el primero abarca los precios unitarios menores a 500
//el segundo de los precios unitarios menores a 1000 y el tercero para aquellos que sobrepasen, realizando una 
//sumatoria de acuerdo al caso
db.ventas.aggregate([
    {
        $group: {
            _id:{
                $switch: {
                    branches: [
                        { case: { $lte: ["$precio_unitario",500] }, then: "Bajo" },
                        { case: { $lte: ["$precio_unitario",1000] }, then: "Medio" },
                    ],
                    default: "Alto"
                }
            },
            cantidad_productos: { $sum: 1 }
        }
    }
]);

//////////////////////////////////////
BLOQUE 4. "OPERADOR SORT"
//////////////////////////////////////

****EJEMPLO 1*****
//Ordena los elementos en forma ascendente
db.ventas.aggregate([
    {
        $sort: { fecha_venta:1 }
    }
]);

****EJEMPLO 2*****
//Ordena los elementos de forma descendente, delimitando a 3 registros 
db.ventas.aggregate([
    {
        $sort: { precio_unitario: -1 }
    },

    {
        $limit:3
    }
]);

****EJEMPLO 3*****
//Ordena los elementos de forma ascendente, delimitando a 1 registros 
db.ventas.aggregate([
    {
        $sort: { precio_unitario: 1 }
    },

    {
        $limit:1
    }
]);


//////////////////////////////////////
BLOQUE 5. "OPERADOR PROJECT"
//////////////////////////////////////

****EJEMPLO 1*****
//Muestra los 3 campos como son id, producto y precio unitario
db.ventas.aggregate([
    {
        $project: {
            _id: 1,
            producto: 1,
            precio_unitario: 1
        }
    }
]);

****EJEMPLO 2*****
//Muestra los campos seleccionados y se realiza la multiplicación de los campos cantidad y precio unitario
db.ventas.aggregate([
    {
        $project: {
            _id: 1,
            producto: 1,
            precio_unitario: 1,
            cantidad: 1,
            precio_total: { 
                $multiply:  ["$cantidad","$precio_unitario"]
            }
        }
    }
]);

****EJEMPLO 3*****
//Transforma la fecha de venta en formato de año, mes y día 
db.ventas.aggregate([
    {
        $project: {
            _id: 1,
            producto: 1,
            cantidad: 1,
            precio_unitario: 1,
            fecha_venta_formateada: { 
                $dateToString:  {
                    format: "%Y-%m-%d", date: "$fecha_venta"
                }
            }
        }
    }
]);

//////////////////////////////////////
BLOQUE 6. "facet"
//////////////////////////////////////

****EJEMPLO 1*****
db.libros.aggregate([
    {
        $facet: {
            "totalLibros":[
            {$count: "total"}
        ],
        "autoresUnicos": [
            {$group: {_id: "$autor", libros: {$push: "$titulo"} } },
            {$projecto: {autor: "$_id", libros: 1. _id: 0} }
        ]
    }
}   
]);

//////////////////////////////////////
BLOQUE 7. "lookup"
//////////////////////////////////////
****EJEMPLO 1*****
db.pedidos.aggregate([
    {
        $lookup: {
            from: "clientes",
            localField: "clienteId",
            foreignField: "_id",
            as: "infoCliente"
        }
    }
])

//////////////////////////////////////
BLOQUE 8. "graphLookup"
//////////////////////////////////////
****EJEMPLO 1*****
db.empleados.aggregate([
    {
        $graphLookup: {
            from: "empleados",
            strartwith: "$_id",
            connectFromField: "$_id",
            connectToField: "jefeId",
            as: "subordinados"
        }
    }   
])

//////////////////////////////////////
BLOQUE 9. "multiples colecciones"
//////////////////////////////////////
****EJEMPLO 1*****
db.empleados.aggregate([
    {
        $graphLookup: {
            from: "departamentos",
            localField: "departamentosId",
            foreignField: "_id",
            as: "infoDepartamento"
        }
    },
    {
        $unwind: "$infoDepartamento"
    }
])

****EJEMPLO 2*****
db.pedidos.aggregate([
    {
        $lookup: {
            from: "clientes",
            localField: "clienteId",
            foreignField: "_id",
            as: "infoCliente"
        }
    },
    {
        $lookup: {
            from: "productos",
            localField: "productoId",
            foreignField: "_id",
            as: "infoProducto"
        }
    },
    {
        $unwind: "$infoCliente"
    },
    {
        $unwind: "$infoProducto"
    }
])

//////////////////////////////////////
BLOQUE 10. "Suma y promedio"
//////////////////////////////////////
****EJEMPLO 1*****
db.pedidos.aggregate([
    //Paso 1 Agrupar por clienteId y calcular el total y el promedio de
    //productos por cliente
    {
    $group:{
        _id: "$clienteId",
        totalProductos: {$sum: "$cantidad"}, //total de productos por cliente
        promedioProductos:{$avg: "$cantidad"} //promedio de productos por cliente
    }
    },
    //Paso 2: unir con la coleccion de clientes para obtener informacion adicional
     {
        $lookup: {
            from: "clientes",
            localField: "clienteId",
            foreignField: "_id",
            as: "infoCliente"
        }
    },
    //Paso 3: Deshacer el array resultante despues de la union
    {
        $unwind: "$infoCliente"
    },
    //Paso 4: proyectar los campos deseados y renombrar para mayor claridad
    {
    $project:{
    cliente: "$infoCliente.nombre",
    totalProductos: 1,
    promedioProductos:1
    }
    }
])

//////////////////////////////////////
BLOQUE 11. "Maximo y minimo"
//////////////////////////////////////
****EJEMPLO 1*****
db.pedidos.aggregate([
    //Paso 1 Agrupar por pedidoId y calcular la cantidad maxima y minima de
    //productos por pedido
    {
    $group:{
        _id: "$pedidoId",
        maxCantidad: {$max: "$cantidad"}, //cantidad maxima de productos por pedido
        minCantidad:{$min: "$cantidad"} //cantidad minima de productos por pedido
    }
    },
    //Paso 2: unir con la coleccion de clientes para obtener informacion adicional
     {
        $lookup: {
            from: "productos",
            localField: "productoId",
            foreignField: "_id",
            as: "infoProducto"
        }
    },
    //Paso 3: Deshacer el array resultante despues de la union
    {
        $unwind: "$infoProducto"
    },
    //Paso 4: proyectar los campos deseados y renombrar para mayor claridad
    {
    $project:{
    pedidoId: "$infoProducto.nombre",
    maxCantidad: 1,
    minCantidad:1
    }
    }
])

**** CORRECCION *****
db.pedidos.aggregate([
    //Paso 1 Agrupar por pedidoId y obtener la cantidad de productos en cada pedido
    
    {
    $group:{
        _id: "$pedidoId",
        cantiProductos: {$sum: "$cantidad"}
    }
    },
    //Paso 2: encontrar la cantidad maximo y minimo de productos
    {
     $group:{
        _id: null,
        maxCantidad: {$max: "$cantidadProductos"}, 
        minCantidad:{$min: "$cantidadProductos"}
    }
    },
    //Paso 3: proyectar los resultados finales
    {
    $project:{
    maxCantidad: 1,
    minCantidad:1
    }
    }

])

////////////////////////////////////////////////
//  Inicio de la transaccion
////////////////////////////////////////////////

session.startTransaction();

try{
    // paso 1: Actualizar la cantidad  de productos en el inventario

    db.inventario.updateOne({producto;"Laptop X", cantidad: {$gte: 5}},{$inc:{cantidad:-5}});

    // paso 2: Registrar el pedido

    db.pedidos.insertOne({
        producto:"Lapto x",
        cantidad: 5, 
        cliente: "Cliente123",
        fecha: new Date()
    });

    //Cofirmar la transaccion

    session.commitTransaction();
}catch (error){
    //Revertir la transaccion en caso de error 
    session.abortTransaction();
    print("Error en la transaccion: + error");
}


////////////////////////////////////////////////
// Inicio de la transaccion distribuida
////////////////////////////////////////////////

session.startTransaction({
    readConcern: { level: "snapshot"},
    writeConcern: {w: "majority"}
});

try{
    // Paso 1: Actualizar la cantidad de productos en el inventario en centro de datos A
    db.inventarioCD_A.updateOne({producto: "Laptop X", cantidad: { $gte: 5}},{$inc: {cantidad: -5}});

    //Paso 2: Actualizar la cantidad de productos en el inventario en Centros de Datos B
    db.inventarioCD_B.updateOne({producto: "Laptop X", cantidad: { $gte: 5}},{$inc: {cantidad: -5}});

    // Confirmar la transaccion distribuida
    session.commitTransaction();

}catch (error){
    //Revertir la transaccion en caso de error 
    session.abortTransaction();
    print("Error en la transaccion: + error");
}


////////////////////////////////////////////////
//Uso de transacciones en operaciones complejas.
////////////////////////////////////////////////
session.startTransaction();
try{
    const asientosDisponibles = db.eventos.findOne({ _id: eventoId}). asientosDisponibles;
    if(asientosDisponibles >= cantidadAsientos){
        db.usuarios.updateOne({ _id: userId},{$push: {reservas: {eventoId, cantidadAsientos}}});
        db.eventos.updateOne({_id: eventoId, asientosDisponibles: { $gte: cantidadAsientos}},
            {$inc: {asientosDisponibles: -cantidadAsientos}});
session.commitTransaction();
    }else{
        print("No hay suficientes asientos disponibles")
    }
}catch (error){
    //Revertir la transaccion en caso de error 
    session.abortTransaction();
    print("Error en la transaccion: + error");
}

////////////////////////////////////////////////
 //Estrategias para el modelado de datos en MongoDB
////////////////////////////////////////////////
 {
    _id: ObjectId("..."),
    titulo: "Titulo del Articulo",
    contenido : "Contenido del articulo....",
    autor{
        nombre: "Nombre del Autor",
        bio: : " Biografia del autor"
    },
    comentario :[
        {usuario: "Usuario1", texto: "Comentario 1"},
        {usuario: "Usuario2", texto: "Comentario 2"}

    ]
 }

////////////////////////////////////////////////
 //Modelado de relaciones entre documentos.
////////////////////////////////////////////////

 //Docuemnto del producto
 {
    _id: ObjectId("...")
    nombre: "Nombre del Proucto",
    descripcion: "Descripcion del Producto",
    precio: 29.99,
    categoria: [ObjectId("cat1"), ObjectId(cat2)]
 }

 // Docuemnto de categoria
 {
    _id:ObjectId("cat1"),
    nombre: "Electronicos",
    descripcion: "Producto electronico"
 }

 //documento de categoria
 {
    _id: ObjectId("cat2"),
    nombre: "Ropa",
    descripcion: "Ropa de moda"
 }
 
////////////////////////////////////////////////
// PARTE 2 
{
    _id: ObjectId("..."),
    titulo: "Titulo del Articulo",
    contenido : "Contenido del articulo....",
    autor{
        nombre: "Nombre del Autor",
        bio: : " Biografia del autor"
    }
 }

////////////////////////////////////////////////
 // Modelado para optimizar consultas y agregaciones
////////////////////////////////////////////////
 // Documento e pedido

 {
    _id: ObjectId("..."),
    mumero: "123456",
    fecha: ISODate("2023-01-01"),
    cliente: {
        nombre: "Nombre del Cliente",
        direccion: : " direccion del cliente"
    },
    comentario :[
        {nombre: "Producto1", cantidad: 2, precio: 19.99},
        {nombre: "Producto2", cantidad: 1, precio: 39.99},
    ]
 }

////////////////////////////////////////////////

db.lugares.createIndex({ ubicacion: "2dsphere":});
db.lugaes.insertOne( {
    nombre:"Museo de arte moderno",
    ubicacion:m {type: "Point", coordinates: [-99.1712, 19.4195] }
});
db.lugares.insertOne({
    nombre:" Parque Chapultepec",
    ubicacion:{ type: "Point", coordinates: [-99.1817, 19.4142]}
});
////////////////////////////////////////////////
db.lugares.find:({
    ubicacion: {
        $near: (
           $geometry: {type: "Point", coordinates: [-99.1665, 19.4230]}
            $maxDistance:500 // en metros

}
}
});
///////////////CONSULTAS GEOESPACIALES/////////////////////////////////
geoespacial> {type: "Point", coordinates: longitud, latitud}
geoespacial> {type: "LineString", coordinates: [longitud,Longitud1], [latitud,latitud1]}
geoespacial> {type: "Polygon", coordinates: [longitud,Longitud1], [latitud,latitud1].................}
geoespacial> {type: "Multipoint", coordinates: [longitud,Longitud1], [latitud,latitud1].................}
geoespacial> {type: "MultiString", coordinates: [[longitud,Longitud1], [latitud,latitud1].............].....}
///////////////EJEMPLO DE CONSULTAS GEOESPACIALES/////////////////////////////////
db.lugares.find ({
    ubicacion: {
    $geoWthin:{
    type: "Polygon",
    coordinates: []
        [[[longitud,Longitud1],[[longitud,Longitud2],[[longitud,Longitud3],[[longitud,Longitud4]]
    ]
}
}
}
}
}),
///////////////EJEMPLO de CONFIGURACIÒN DE AUTENTIFICACION AVANZADA///////////////
///////SCRAM////////
use admin
db.createUser(
  {
    user: "user1",
    pwd: "password",
    roles: [ { role: "readWrite", db: "testdb" } ],
    mechanisms: ["SCRAM-SHA-256"]
  }
)
///////LDAP////////   
security:
  ldap:
    servers: "ldap.example.com"
    bind:
      method: "simple"
      queryUser: "cn=admin,dc=example,dc=com"
      queryPassword: "password"
///////x.509//////// 
net:
  ssl:
    mode: requireSSL
    PEMKeyFile: /etc/ssl/mongodb.pem
    CAFile: /etc/ssl/ca.pem
///////Ejemplo de Rol Persoanlizado ////////   
db.createRole({
  role: "myCustomRole",
  privileges: [
    { resource: { db: "testdb", collection: "" }, actions: [ "find", "update" ] }
  ],
  roles: []
});
////////////////////////////////////////////////
//////////////Comando Explain///////
////////////////////////////////////////////////
//La consulta todos aquellos elementos que tienen un autor  llamado “Autor A”
db.libros,find({ autor: Autor "A" });
//Mostrar en formato estructurado
db.libros,find({ autor: Autor "A" }).explain("executionStats");
//uso de indices
db.libros,find({ autor: Autor "A" }).explain("executionStats"),indexBounds;
//Activar perfil de consultas
db.setProfilingLevel(2, { slowms: 100 });
//Para ver resultados de coonsulta
db.system.profile.find({}).pretty();
//Para desactivar consulta
db.setProfilingLevel(0);






    
